{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>LIMIT_BAL</th>\n",
       "      <th>SEX</th>\n",
       "      <th>EDUCATION</th>\n",
       "      <th>MARRIAGE</th>\n",
       "      <th>AGE</th>\n",
       "      <th>PAY_0</th>\n",
       "      <th>PAY_2</th>\n",
       "      <th>PAY_3</th>\n",
       "      <th>PAY_4</th>\n",
       "      <th>...</th>\n",
       "      <th>BILL_AMT4</th>\n",
       "      <th>BILL_AMT5</th>\n",
       "      <th>BILL_AMT6</th>\n",
       "      <th>PAY_AMT1</th>\n",
       "      <th>PAY_AMT2</th>\n",
       "      <th>PAY_AMT3</th>\n",
       "      <th>PAY_AMT4</th>\n",
       "      <th>PAY_AMT5</th>\n",
       "      <th>PAY_AMT6</th>\n",
       "      <th>default payment next month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>20000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>689</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>120000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>3272</td>\n",
       "      <td>3455</td>\n",
       "      <td>3261</td>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>14331</td>\n",
       "      <td>14948</td>\n",
       "      <td>15549</td>\n",
       "      <td>1518</td>\n",
       "      <td>1500</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>5000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>50000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>28314</td>\n",
       "      <td>28959</td>\n",
       "      <td>29547</td>\n",
       "      <td>2000</td>\n",
       "      <td>2019</td>\n",
       "      <td>1200</td>\n",
       "      <td>1100</td>\n",
       "      <td>1069</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>20940</td>\n",
       "      <td>19146</td>\n",
       "      <td>19131</td>\n",
       "      <td>2000</td>\n",
       "      <td>36681</td>\n",
       "      <td>10000</td>\n",
       "      <td>9000</td>\n",
       "      <td>689</td>\n",
       "      <td>679</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>19394</td>\n",
       "      <td>19619</td>\n",
       "      <td>20024</td>\n",
       "      <td>2500</td>\n",
       "      <td>1815</td>\n",
       "      <td>657</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>800</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>500000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>542653</td>\n",
       "      <td>483003</td>\n",
       "      <td>473944</td>\n",
       "      <td>55000</td>\n",
       "      <td>40000</td>\n",
       "      <td>38000</td>\n",
       "      <td>20239</td>\n",
       "      <td>13750</td>\n",
       "      <td>13770</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>100000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>221</td>\n",
       "      <td>-159</td>\n",
       "      <td>567</td>\n",
       "      <td>380</td>\n",
       "      <td>601</td>\n",
       "      <td>0</td>\n",
       "      <td>581</td>\n",
       "      <td>1687</td>\n",
       "      <td>1542</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>140000</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>12211</td>\n",
       "      <td>11793</td>\n",
       "      <td>3719</td>\n",
       "      <td>3329</td>\n",
       "      <td>0</td>\n",
       "      <td>432</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>20000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>35</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>13007</td>\n",
       "      <td>13912</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13007</td>\n",
       "      <td>1122</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID  LIMIT_BAL  SEX  EDUCATION  MARRIAGE  AGE  PAY_0  PAY_2  PAY_3  PAY_4  \\\n",
       "0   1      20000    2          2         1   24      2      2     -1     -1   \n",
       "1   2     120000    2          2         2   26     -1      2      0      0   \n",
       "2   3      90000    2          2         2   34      0      0      0      0   \n",
       "3   4      50000    2          2         1   37      0      0      0      0   \n",
       "4   5      50000    1          2         1   57     -1      0     -1      0   \n",
       "5   6      50000    1          1         2   37      0      0      0      0   \n",
       "6   7     500000    1          1         2   29      0      0      0      0   \n",
       "7   8     100000    2          2         2   23      0     -1     -1      0   \n",
       "8   9     140000    2          3         1   28      0      0      2      0   \n",
       "9  10      20000    1          3         2   35     -2     -2     -2     -2   \n",
       "\n",
       "   ...  BILL_AMT4  BILL_AMT5  BILL_AMT6  PAY_AMT1  PAY_AMT2  PAY_AMT3  \\\n",
       "0  ...          0          0          0         0       689         0   \n",
       "1  ...       3272       3455       3261         0      1000      1000   \n",
       "2  ...      14331      14948      15549      1518      1500      1000   \n",
       "3  ...      28314      28959      29547      2000      2019      1200   \n",
       "4  ...      20940      19146      19131      2000     36681     10000   \n",
       "5  ...      19394      19619      20024      2500      1815       657   \n",
       "6  ...     542653     483003     473944     55000     40000     38000   \n",
       "7  ...        221       -159        567       380       601         0   \n",
       "8  ...      12211      11793       3719      3329         0       432   \n",
       "9  ...          0      13007      13912         0         0         0   \n",
       "\n",
       "   PAY_AMT4  PAY_AMT5  PAY_AMT6  default payment next month  \n",
       "0         0         0         0                           1  \n",
       "1      1000         0      2000                           1  \n",
       "2      1000      1000      5000                           0  \n",
       "3      1100      1069      1000                           0  \n",
       "4      9000       689       679                           0  \n",
       "5      1000      1000       800                           0  \n",
       "6     20239     13750     13770                           0  \n",
       "7       581      1687      1542                           0  \n",
       "8      1000      1000      1000                           0  \n",
       "9     13007      1122         0                           0  \n",
       "\n",
       "[10 rows x 25 columns]"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#This section is importing all libraries & data used for the project\n",
    "\n",
    "#importing all necessary libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy.stats as stats\n",
    "\n",
    "#importing the data file\n",
    "data = pd.read_csv(\"CreditCard_train.csv\")\n",
    "#displaying the first 10 rows of the data\n",
    "data.head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID', 'LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'PAY_0',\n",
       "       'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'BILL_AMT1', 'BILL_AMT2',\n",
       "       'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1',\n",
       "       'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6',\n",
       "       'default payment next month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#displaying the columns of the data file\n",
    "data.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1231.5x1080 with 23 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#This section is visualizing & exploring the data\n",
    "\n",
    "#for simplification\n",
    "output = 'default payment next month'\n",
    "\n",
    "#Conducting exploratory data analysis (EDA)\n",
    "cols = [ f for f in data.columns if data.dtypes[ f ] != \"object\"]\n",
    "#Removing irrelevant columns from the data \n",
    "cols.remove( \"ID\")\n",
    "cols.remove( output )\n",
    "\n",
    "f = pd.melt( data, id_vars=output, value_vars=cols)\n",
    "g = sns.FacetGrid( f, hue=output, col=\"variable\", col_wrap=5, sharex=False, sharey=False )\n",
    "g = g.map( sns.distplot, \"value\", kde=True).add_legend()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>LIMIT_BAL</th>\n",
       "      <th>SEX</th>\n",
       "      <th>EDUCATION</th>\n",
       "      <th>MARRIAGE</th>\n",
       "      <th>AGE</th>\n",
       "      <th>PAY_0</th>\n",
       "      <th>PAY_2</th>\n",
       "      <th>PAY_3</th>\n",
       "      <th>PAY_4</th>\n",
       "      <th>...</th>\n",
       "      <th>['PAY_6']_-2</th>\n",
       "      <th>['PAY_6']_-1</th>\n",
       "      <th>['PAY_6']_0</th>\n",
       "      <th>['PAY_6']_2</th>\n",
       "      <th>['PAY_6']_3</th>\n",
       "      <th>['PAY_6']_4</th>\n",
       "      <th>['PAY_6']_5</th>\n",
       "      <th>['PAY_6']_6</th>\n",
       "      <th>['PAY_6']_7</th>\n",
       "      <th>['PAY_6']_8</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>20000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>120000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>50000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23995</td>\n",
       "      <td>23996</td>\n",
       "      <td>80000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23996</td>\n",
       "      <td>23997</td>\n",
       "      <td>20000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23997</td>\n",
       "      <td>23998</td>\n",
       "      <td>10000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23998</td>\n",
       "      <td>23999</td>\n",
       "      <td>20000</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23999</td>\n",
       "      <td>24000</td>\n",
       "      <td>100000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>24000 rows Ã— 102 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          ID  LIMIT_BAL SEX EDUCATION MARRIAGE  AGE PAY_0 PAY_2 PAY_3 PAY_4  \\\n",
       "0          1      20000   2         2        1   24     2     2    -1    -1   \n",
       "1          2     120000   2         2        2   26    -1     2     0     0   \n",
       "2          3      90000   2         2        2   34     0     0     0     0   \n",
       "3          4      50000   2         2        1   37     0     0     0     0   \n",
       "4          5      50000   1         2        1   57    -1     0    -1     0   \n",
       "...      ...        ...  ..       ...      ...  ...   ...   ...   ...   ...   \n",
       "23995  23996      80000   1         2        1   25     1     2     2     0   \n",
       "23996  23997      20000   1         2        1   25     0     0     0     0   \n",
       "23997  23998      10000   1         2        2   26     0     0     0     0   \n",
       "23998  23999      20000   1         5        2   26     0     0     0     0   \n",
       "23999  24000     100000   1         1        2   26     0    -1     0     0   \n",
       "\n",
       "       ... ['PAY_6']_-2 ['PAY_6']_-1  ['PAY_6']_0  ['PAY_6']_2  ['PAY_6']_3  \\\n",
       "0      ...            1            0            0            0            0   \n",
       "1      ...            0            0            0            1            0   \n",
       "2      ...            0            0            1            0            0   \n",
       "3      ...            0            0            1            0            0   \n",
       "4      ...            0            0            1            0            0   \n",
       "...    ...          ...          ...          ...          ...          ...   \n",
       "23995  ...            0            0            1            0            0   \n",
       "23996  ...            0            0            1            0            0   \n",
       "23997  ...            0            0            1            0            0   \n",
       "23998  ...            1            0            0            0            0   \n",
       "23999  ...            0            0            1            0            0   \n",
       "\n",
       "       ['PAY_6']_4  ['PAY_6']_5  ['PAY_6']_6  ['PAY_6']_7  ['PAY_6']_8  \n",
       "0                0            0            0            0            0  \n",
       "1                0            0            0            0            0  \n",
       "2                0            0            0            0            0  \n",
       "3                0            0            0            0            0  \n",
       "4                0            0            0            0            0  \n",
       "...            ...          ...          ...          ...          ...  \n",
       "23995            0            0            0            0            0  \n",
       "23996            0            0            0            0            0  \n",
       "23997            0            0            0            0            0  \n",
       "23998            0            0            0            0            0  \n",
       "23999            0            0            0            0            0  \n",
       "\n",
       "[24000 rows x 102 columns]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Principa Component Analysis\n",
    "categories = ['SEX', 'EDUCATION', 'MARRIAGE', 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']\n",
    "for element in categories:\n",
    "    data[element] = data[element].astype('category')\n",
    "    \n",
    "for element in categories:\n",
    "    data = pd.concat((data, pd.get_dummies(data[element], prefix=[element])), axis=1)\n",
    "    \n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ID', 'LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6', 'default payment next month', \"['SEX']_1\", \"['SEX']_2\", \"['EDUCATION']_0\", \"['EDUCATION']_1\", \"['EDUCATION']_2\", \"['EDUCATION']_3\", \"['EDUCATION']_4\", \"['EDUCATION']_5\", \"['EDUCATION']_6\", \"['MARRIAGE']_0\", \"['MARRIAGE']_1\", \"['MARRIAGE']_2\", \"['MARRIAGE']_3\", \"['PAY_0']_-2\", \"['PAY_0']_-1\", \"['PAY_0']_0\", \"['PAY_0']_1\", \"['PAY_0']_2\", \"['PAY_0']_3\", \"['PAY_0']_4\", \"['PAY_0']_5\", \"['PAY_0']_6\", \"['PAY_0']_7\", \"['PAY_0']_8\", \"['PAY_2']_-2\", \"['PAY_2']_-1\", \"['PAY_2']_0\", \"['PAY_2']_1\", \"['PAY_2']_2\", \"['PAY_2']_3\", \"['PAY_2']_4\", \"['PAY_2']_5\", \"['PAY_2']_6\", \"['PAY_2']_7\", \"['PAY_2']_8\", \"['PAY_3']_-2\", \"['PAY_3']_-1\", \"['PAY_3']_0\", \"['PAY_3']_1\", \"['PAY_3']_2\", \"['PAY_3']_3\", \"['PAY_3']_4\", \"['PAY_3']_5\", \"['PAY_3']_6\", \"['PAY_3']_7\", \"['PAY_3']_8\", \"['PAY_4']_-2\", \"['PAY_4']_-1\", \"['PAY_4']_0\", \"['PAY_4']_1\", \"['PAY_4']_2\", \"['PAY_4']_3\", \"['PAY_4']_4\", \"['PAY_4']_5\", \"['PAY_4']_6\", \"['PAY_4']_7\", \"['PAY_4']_8\", \"['PAY_5']_-2\", \"['PAY_5']_-1\", \"['PAY_5']_0\", \"['PAY_5']_2\", \"['PAY_5']_3\", \"['PAY_5']_4\", \"['PAY_5']_5\", \"['PAY_5']_6\", \"['PAY_5']_7\", \"['PAY_5']_8\", \"['PAY_6']_-2\", \"['PAY_6']_-1\", \"['PAY_6']_0\", \"['PAY_6']_2\", \"['PAY_6']_3\", \"['PAY_6']_4\", \"['PAY_6']_5\", \"['PAY_6']_6\", \"['PAY_6']_7\", \"['PAY_6']_8\"]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>LIMIT_BAL</th>\n",
       "      <th>SEX</th>\n",
       "      <th>EDUCATION</th>\n",
       "      <th>MARRIAGE</th>\n",
       "      <th>AGE</th>\n",
       "      <th>PAY_0</th>\n",
       "      <th>PAY_2</th>\n",
       "      <th>PAY_3</th>\n",
       "      <th>PAY_4</th>\n",
       "      <th>...</th>\n",
       "      <th>['PAY_6']_-2</th>\n",
       "      <th>['PAY_6']_-1</th>\n",
       "      <th>['PAY_6']_0</th>\n",
       "      <th>['PAY_6']_2</th>\n",
       "      <th>['PAY_6']_3</th>\n",
       "      <th>['PAY_6']_4</th>\n",
       "      <th>['PAY_6']_5</th>\n",
       "      <th>['PAY_6']_6</th>\n",
       "      <th>['PAY_6']_7</th>\n",
       "      <th>['PAY_6']_8</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>20000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>120000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>50000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23995</td>\n",
       "      <td>23996</td>\n",
       "      <td>80000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23996</td>\n",
       "      <td>23997</td>\n",
       "      <td>20000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23997</td>\n",
       "      <td>23998</td>\n",
       "      <td>10000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23998</td>\n",
       "      <td>23999</td>\n",
       "      <td>20000</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23999</td>\n",
       "      <td>24000</td>\n",
       "      <td>100000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>24000 rows Ã— 102 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          ID  LIMIT_BAL SEX EDUCATION MARRIAGE  AGE PAY_0 PAY_2 PAY_3 PAY_4  \\\n",
       "0          1      20000   2         2        1   24     2     2    -1    -1   \n",
       "1          2     120000   2         2        2   26    -1     2     0     0   \n",
       "2          3      90000   2         2        2   34     0     0     0     0   \n",
       "3          4      50000   2         2        1   37     0     0     0     0   \n",
       "4          5      50000   1         2        1   57    -1     0    -1     0   \n",
       "...      ...        ...  ..       ...      ...  ...   ...   ...   ...   ...   \n",
       "23995  23996      80000   1         2        1   25     1     2     2     0   \n",
       "23996  23997      20000   1         2        1   25     0     0     0     0   \n",
       "23997  23998      10000   1         2        2   26     0     0     0     0   \n",
       "23998  23999      20000   1         5        2   26     0     0     0     0   \n",
       "23999  24000     100000   1         1        2   26     0    -1     0     0   \n",
       "\n",
       "       ... ['PAY_6']_-2 ['PAY_6']_-1  ['PAY_6']_0  ['PAY_6']_2  ['PAY_6']_3  \\\n",
       "0      ...            1            0            0            0            0   \n",
       "1      ...            0            0            0            1            0   \n",
       "2      ...            0            0            1            0            0   \n",
       "3      ...            0            0            1            0            0   \n",
       "4      ...            0            0            1            0            0   \n",
       "...    ...          ...          ...          ...          ...          ...   \n",
       "23995  ...            0            0            1            0            0   \n",
       "23996  ...            0            0            1            0            0   \n",
       "23997  ...            0            0            1            0            0   \n",
       "23998  ...            1            0            0            0            0   \n",
       "23999  ...            0            0            1            0            0   \n",
       "\n",
       "       ['PAY_6']_4  ['PAY_6']_5  ['PAY_6']_6  ['PAY_6']_7  ['PAY_6']_8  \n",
       "0                0            0            0            0            0  \n",
       "1                0            0            0            0            0  \n",
       "2                0            0            0            0            0  \n",
       "3                0            0            0            0            0  \n",
       "4                0            0            0            0            0  \n",
       "...            ...          ...          ...          ...          ...  \n",
       "23995            0            0            0            0            0  \n",
       "23996            0            0            0            0            0  \n",
       "23997            0            0            0            0            0  \n",
       "23998            0            0            0            0            0  \n",
       "23999            0            0            0            0            0  \n",
       "\n",
       "[24000 rows x 102 columns]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#displaying the columns of the data file\n",
    "print(list(data.columns))\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.64260509, -0.64727168, -0.66984012, -0.67177126, -0.66288023,\n",
       "        -0.65191478],\n",
       "       [-0.65954984, -0.66684158, -0.64061403, -0.61989188, -0.60562493,\n",
       "        -0.59678798],\n",
       "       [-0.29399193, -0.49200571, -0.48110963, -0.44454526, -0.41516611,\n",
       "        -0.38906085],\n",
       "       ...,\n",
       "       [-0.57420665, -0.55018959, -0.5358664 , -0.39420387, -0.38765705,\n",
       "        -0.49679563],\n",
       "       [-0.41340357, -0.40308131, -0.39554301, -0.03834173, -0.66288023,\n",
       "        -0.65191478],\n",
       "       [-0.67521444, -0.67644889, -0.64963262, -0.64094806, -0.65643383,\n",
       "        -0.63127392]])"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "bill = ['BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']\n",
    "bill_values = data.loc[:, bill].values\n",
    "target_values = data.loc[:, ['default payment next month']].values\n",
    "bill_values = StandardScaler().fit_transform(bill_values)\n",
    "bill_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       bill_pc1  bill_pc2\n",
      "0     -1.611216  0.010071\n",
      "1     -1.546814 -0.066453\n",
      "2     -1.028676  0.013599\n",
      "3     -0.233383  0.177654\n",
      "4     -0.960107 -0.227755\n",
      "...         ...       ...\n",
      "23995  1.058638  0.135535\n",
      "23996 -1.031067 -0.121125\n",
      "23997 -1.198402 -0.141770\n",
      "23998 -1.043755  0.152590\n",
      "23999 -1.604194 -0.037400\n",
      "\n",
      "[24000 rows x 2 columns]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.90774248, 0.04974495])"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "pca_bill = PCA(n_components=2)\n",
    "principalComponents_bill = pca_bill.fit_transform(bill_values)\n",
    "principalDf_bill = pd.DataFrame(data = principalComponents_bill\n",
    "                                , columns = ['bill_pc1', 'bill_pc2'])\n",
    "print(principalDf_bill)\n",
    "pca_bill.explained_variance_ratio_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.3678535 , -0.24649878, -0.30874059, -0.31871886, -0.31325859,\n",
       "        -0.29435041],\n",
       "       [-0.3678535 , -0.23154441, -0.24661057, -0.25152793, -0.31325859,\n",
       "        -0.18090744],\n",
       "       [-0.26711195, -0.20750202, -0.24661057, -0.25152793, -0.24777108,\n",
       "        -0.01074299],\n",
       "       ...,\n",
       "       [-0.28157945, -0.17384267, -0.22797157, -0.29721776, -0.19407132,\n",
       "        -0.23762892],\n",
       "       [-0.16510948, -0.20908882, -0.24064609, -0.25152793, -0.31325859,\n",
       "        -0.29435041],\n",
       "       [-0.29485238, -0.22192745, -0.24661057, -0.28512339, -0.24777108,\n",
       "        -0.23762892]])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pay = ['PAY_AMT1','PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']\n",
    "pay_values = data.loc[:, pay].values\n",
    "pay_values = StandardScaler().fit_transform(pay_values)\n",
    "pay_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        pay_pc1   pay_pc2   pay_pc3   pay_pc4   pay_pc5   pay_pc6\n",
      "0     -0.753442  0.056474  0.016774  0.028364 -0.043054  0.062851\n",
      "1     -0.650050 -0.004134 -0.014271  0.023947 -0.119676  0.078670\n",
      "2     -0.500570  0.038109 -0.131170 -0.038420 -0.161752  0.055923\n",
      "3     -0.560491  0.045290 -0.003965  0.025886  0.009334  0.045229\n",
      "4      0.554640  0.219275  0.637498  0.538860  0.123918  1.227617\n",
      "...         ...       ...       ...       ...       ...       ...\n",
      "23995 -0.407177 -0.084874 -0.035315  0.049919  0.036277 -0.098074\n",
      "23996 -0.581877  0.059387 -0.009436  0.068554 -0.010585  0.085266\n",
      "23997 -0.573232  0.106235  0.023023  0.044355 -0.033970  0.020399\n",
      "23998 -0.599453  0.009161 -0.046206  0.047729  0.102597  0.050621\n",
      "23999 -0.624371  0.056763 -0.001320  0.031416 -0.038328  0.025310\n",
      "\n",
      "[24000 rows x 6 columns]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.30061902, 0.14779329, 0.14538284, 0.14006904, 0.13443381,\n",
       "       0.131702  ])"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_pay = PCA(n_components=6)\n",
    "principalComponents_pay = pca_pay.fit_transform(pay_values)\n",
    "principalDf_pay = pd.DataFrame(data = principalComponents_pay\n",
    "                               , columns = ['pay_pc1', 'pay_pc2', 'pay_pc3', 'pay_pc4', 'pay_pc5', 'pay_pc6'])\n",
    "print(principalDf_pay)\n",
    "pca_pay.explained_variance_ratio_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID', 'LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'PAY_0',\n",
       "       'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'PAY_AMT1', 'PAY_AMT2',\n",
       "       'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6',\n",
       "       'default payment next month', '['SEX']_1', '['SEX']_2',\n",
       "       '['EDUCATION']_0', '['EDUCATION']_1', '['EDUCATION']_2',\n",
       "       '['EDUCATION']_3', '['EDUCATION']_4', '['EDUCATION']_5',\n",
       "       '['EDUCATION']_6', '['MARRIAGE']_0', '['MARRIAGE']_1', '['MARRIAGE']_2',\n",
       "       '['MARRIAGE']_3', '['PAY_0']_-2', '['PAY_0']_-1', '['PAY_0']_0',\n",
       "       '['PAY_0']_1', '['PAY_0']_2', '['PAY_0']_3', '['PAY_0']_4',\n",
       "       '['PAY_0']_5', '['PAY_0']_6', '['PAY_0']_7', '['PAY_0']_8',\n",
       "       '['PAY_2']_-2', '['PAY_2']_-1', '['PAY_2']_0', '['PAY_2']_1',\n",
       "       '['PAY_2']_2', '['PAY_2']_3', '['PAY_2']_4', '['PAY_2']_5',\n",
       "       '['PAY_2']_6', '['PAY_2']_7', '['PAY_2']_8', '['PAY_3']_-2',\n",
       "       '['PAY_3']_-1', '['PAY_3']_0', '['PAY_3']_1', '['PAY_3']_2',\n",
       "       '['PAY_3']_3', '['PAY_3']_4', '['PAY_3']_5', '['PAY_3']_6',\n",
       "       '['PAY_3']_7', '['PAY_3']_8', '['PAY_4']_-2', '['PAY_4']_-1',\n",
       "       '['PAY_4']_0', '['PAY_4']_1', '['PAY_4']_2', '['PAY_4']_3',\n",
       "       '['PAY_4']_4', '['PAY_4']_5', '['PAY_4']_6', '['PAY_4']_7',\n",
       "       '['PAY_4']_8', '['PAY_5']_-2', '['PAY_5']_-1', '['PAY_5']_0',\n",
       "       '['PAY_5']_2', '['PAY_5']_3', '['PAY_5']_4', '['PAY_5']_5',\n",
       "       '['PAY_5']_6', '['PAY_5']_7', '['PAY_5']_8', '['PAY_6']_-2',\n",
       "       '['PAY_6']_-1', '['PAY_6']_0', '['PAY_6']_2', '['PAY_6']_3',\n",
       "       '['PAY_6']_4', '['PAY_6']_5', '['PAY_6']_6', '['PAY_6']_7',\n",
       "       '['PAY_6']_8', 'bill_pc1', 'bill_pc2'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.concat([data, principalDf_bill], axis = 1)\n",
    "data = data.drop(bill, axis=1)\n",
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "covariates = list(data.columns)\n",
    "covariates.remove('ID')\n",
    "covariates.remove('default payment next month')\n",
    "\n",
    "for element in categories:\n",
    "    covariates.remove(element)\n",
    "\n",
    "X_logit = data[covariates]\n",
    "Y_logit = data['default payment next month']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[False False False False False False False False False False False  True\n",
      "  True  True False False False  True False False False False False False\n",
      " False  True  True  True False False False False False False False False\n",
      " False False False False False False False False False False False False\n",
      " False False False False False False False False False False False False\n",
      " False False False False False False False False  True  True False False\n",
      " False  True False False False False False False False False False False\n",
      " False False False]\n",
      "[56 49 50 51 52 53 55 54 40 30 67  1  1  1 13 14 47  1 25 26 24  3 15  2\n",
      " 16  1  1  1 66 68 59 63 38  4 37 72 35 36 12  7 58 64 75 29 28 34 73  9\n",
      " 11 33 57 61  8 76 32 48 42 71 20 41 10 60 78 27 77 46 31 45  1  1 17 65\n",
      " 70  1 74 23 18 19 22  5 21 62  6 43 69 44 39]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "logreg = LogisticRegression(solver='lbfgs', max_iter=700)\n",
    "rfe = RFE(logreg, 10)\n",
    "\n",
    "rfe = rfe.fit(X_logit, Y_logit.values.ravel())\n",
    "print(rfe.support_)\n",
    "print(rfe.ranking_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_logit = X_logit.iloc[:, list(rfe.support_)]\n",
    "to_keep = data.loc[:, ['LIMIT_BAL', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6', \n",
    "                        'bill_pc1', 'bill_pc2']]\n",
    "X_logit = pd.concat((X_logit, to_keep), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.459093\n",
      "         Iterations 7\n",
      "                              Results: Logit\n",
      "===========================================================================\n",
      "Model:              Logit                      Pseudo R-squared: 0.136     \n",
      "Dependent Variable: default payment next month AIC:              22074.4863\n",
      "Date:               2020-01-05 14:14           BIC:              22228.1167\n",
      "No. Observations:   24000                      Log-Likelihood:   -11018.   \n",
      "Df Model:           18                         LL-Null:          -12759.   \n",
      "Df Residuals:       23981                      LLR p-value:      0.0000    \n",
      "Converged:          1.0000                     Scale:            1.0000    \n",
      "No. Iterations:     7.0000                                                 \n",
      "-----------------------------------------------------------------------------\n",
      "                    Coef.    Std.Err.      z       P>|z|     [0.025    0.975]\n",
      "-----------------------------------------------------------------------------\n",
      "['EDUCATION']_1    -1.1697     0.0449   -26.0394   0.0000   -1.2578   -1.0817\n",
      "['EDUCATION']_2    -1.2049     0.0358   -33.6368   0.0000   -1.2752   -1.1347\n",
      "['EDUCATION']_3    -1.1998     0.0482   -24.9010   0.0000   -1.2942   -1.1053\n",
      "['MARRIAGE']_0     -1.4064     0.6372    -2.2071   0.0273   -2.6553   -0.1575\n",
      "['PAY_0']_2         1.9779     0.0527    37.4967   0.0000    1.8745    2.0813\n",
      "['PAY_0']_3         2.1291     0.1520    14.0090   0.0000    1.8312    2.4270\n",
      "['PAY_0']_4         1.6415     0.2738     5.9946   0.0000    1.1048    2.1782\n",
      "['PAY_5']_2         0.8996     0.0537    16.7418   0.0000    0.7943    1.0049\n",
      "['PAY_5']_3         1.2625     0.1958     6.4479   0.0000    0.8787    1.6463\n",
      "['PAY_5']_7         1.0275     0.3977     2.5837   0.0098    0.2481    1.8069\n",
      "LIMIT_BAL          -0.0000     0.0000    -9.5930   0.0000   -0.0000   -0.0000\n",
      "PAY_AMT1           -0.0000     0.0000    -5.9898   0.0000   -0.0000   -0.0000\n",
      "PAY_AMT2           -0.0000     0.0000    -4.8328   0.0000   -0.0000   -0.0000\n",
      "PAY_AMT3           -0.0000     0.0000    -3.7910   0.0002   -0.0000   -0.0000\n",
      "PAY_AMT4           -0.0000     0.0000    -2.0884   0.0368   -0.0000   -0.0000\n",
      "PAY_AMT5           -0.0000     0.0000    -2.4166   0.0157   -0.0000   -0.0000\n",
      "PAY_AMT6           -0.0000     0.0000    -2.8068   0.0050   -0.0000   -0.0000\n",
      "bill_pc1            0.0279     0.0092     3.0438   0.0023    0.0099    0.0458\n",
      "bill_pc2           -0.0953     0.0399    -2.3864   0.0170   -0.1736   -0.0170\n",
      "===========================================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "\n",
    "logit_model=sm.Logit(Y_logit,X_logit)\n",
    "result=logit_model.fit()\n",
    "print(result.summary2())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6', \"['SEX']_1\", \"['SEX']_2\", \"['EDUCATION']_0\", \"['EDUCATION']_1\", \"['EDUCATION']_2\", \"['EDUCATION']_3\", \"['EDUCATION']_4\", \"['EDUCATION']_5\", \"['EDUCATION']_6\", \"['MARRIAGE']_0\", \"['MARRIAGE']_1\", \"['MARRIAGE']_2\", \"['MARRIAGE']_3\", \"['PAY_0']_-2\", \"['PAY_0']_-1\", \"['PAY_0']_0\", \"['PAY_0']_1\", \"['PAY_0']_2\", \"['PAY_0']_3\", \"['PAY_0']_4\", \"['PAY_0']_5\", \"['PAY_0']_6\", \"['PAY_0']_7\", \"['PAY_0']_8\", \"['PAY_2']_-2\", \"['PAY_2']_-1\", \"['PAY_2']_0\", \"['PAY_2']_1\", \"['PAY_2']_2\", \"['PAY_2']_3\", \"['PAY_2']_4\", \"['PAY_2']_5\", \"['PAY_2']_6\", \"['PAY_2']_7\", \"['PAY_2']_8\", \"['PAY_3']_-2\", \"['PAY_3']_-1\", \"['PAY_3']_0\", \"['PAY_3']_1\", \"['PAY_3']_2\", \"['PAY_3']_3\", \"['PAY_3']_4\", \"['PAY_3']_5\", \"['PAY_3']_6\", \"['PAY_3']_7\", \"['PAY_3']_8\", \"['PAY_4']_-2\", \"['PAY_4']_-1\", \"['PAY_4']_0\", \"['PAY_4']_1\", \"['PAY_4']_2\", \"['PAY_4']_3\", \"['PAY_4']_4\", \"['PAY_4']_5\", \"['PAY_4']_6\", \"['PAY_4']_7\", \"['PAY_4']_8\", \"['PAY_5']_-2\", \"['PAY_5']_-1\", \"['PAY_5']_0\", \"['PAY_5']_2\", \"['PAY_5']_3\", \"['PAY_5']_4\", \"['PAY_5']_5\", \"['PAY_5']_6\", \"['PAY_5']_7\", \"['PAY_5']_8\", \"['PAY_6']_-2\", \"['PAY_6']_-1\", \"['PAY_6']_0\", \"['PAY_6']_2\", \"['PAY_6']_3\", \"['PAY_6']_4\", \"['PAY_6']_5\", \"['PAY_6']_6\", \"['PAY_6']_7\", \"['PAY_6']_8\", 'bill_pc1', 'bill_pc2']\n",
      "(24000, 98)\n"
     ]
    }
   ],
   "source": [
    "data.columns\n",
    "cols = [ f for f in data.columns if data.dtypes[ f ] != \"object\"]\n",
    "cols.remove('ID')\n",
    "cols.remove('default payment next month')\n",
    "print(cols)\n",
    "print(data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=10,\n",
       "                       n_jobs=None, oob_score=False, random_state=None,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## RANDOM FOREST CLASSIFIER ##\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "#X and y are the predictor and output variables of the forest\n",
    "X = data[cols].values    \n",
    "y = data[ output ].values\n",
    "RSEED=5\n",
    "\n",
    "#Carrying out the testing & fitting of the model \n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=RSEED, test_size=0.25)\n",
    "model_RF = RandomForestClassifier()\n",
    "model_RF.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "one of the 4 most important features is LIMIT_BAL\n",
      "one of the 4 most important features is AGE\n",
      "one of the 4 most important features is bill_pc1\n",
      "one of the 4 most important features is bill_pc2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the accuracy of the Random Forest model with all features is 0.7956666666666666.\n",
      "the accuracy of the Random Forest model with only the top 4 most important features is 0.7446666666666667.\n"
     ]
    }
   ],
   "source": [
    "#Dimensionality reduction for Random Forest\n",
    "features = cols\n",
    "importances = model_RF.feature_importances_\n",
    "indices = np.argsort(importances)[-15:]\n",
    "plt.title('Feature Importances')\n",
    "plt.barh(range(len(indices)), importances[indices], color='b', align='center')\n",
    "plt.yticks(range(len(indices)), [features[i] for i in indices])\n",
    "plt.xlabel('Relative Importance')\n",
    "plt.show()\n",
    "\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "# Creating a selector object that will use the random forest classifier to identify\n",
    "# features that have an importance greater than 0.06\n",
    "sfm = SelectFromModel(model_RF, threshold=0.06)\n",
    "\n",
    "# Training the selector\n",
    "sfm.fit(X_train, y_train)\n",
    "\n",
    "# Displaying the names of the most important features\n",
    "for feature_list_index in sfm.get_support(indices=True):\n",
    "    print(f'one of the 4 most important features is {cols[feature_list_index]}')\n",
    "\n",
    "# Transforming both the training & testing data to create a new dataset containing only the most important features\n",
    "X_important_train = sfm.transform(X_train)\n",
    "X_important_test = sfm.transform(X_test)\n",
    "\n",
    "# Creating a new random forest classifier for the most important features only\n",
    "model_RF_important = RandomForestClassifier(random_state=RSEED)\n",
    "\n",
    "# Training the new classifier on the new dataset containing the most important features only\n",
    "model_RF_important.fit(X_important_train, y_train)\n",
    "\n",
    "# Apply The Full Featured Classifier To The Test Data\n",
    "y_pred = model_RF.predict(X_test)\n",
    "\n",
    "#Accuracy of model prior to any feature selection (all features) \n",
    "a1=accuracy_score(y_test, y_pred)\n",
    "print(f'the accuracy of the Random Forest model with all features is {a1}.')\n",
    "\n",
    "# Apply important features classifier to the testing data\n",
    "y_important_pred = model_RF_important.predict(X_important_test)\n",
    "\n",
    "# Accuracy of model with feature selection\n",
    "a2=accuracy_score(y_test, y_important_pred)\n",
    "print(f'the accuracy of the Random Forest model with only the top 4 most important features is {a2}.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The optimum maximum depth of the tree is 11.0.\n"
     ]
    }
   ],
   "source": [
    "## RANDOM FOREST CLASSIFIER ##\n",
    "\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "#Hyperparamter optimization of max_depth\n",
    "max_depths = np.linspace(1, 40, 40, endpoint=True)\n",
    "train_results_rf = []\n",
    "test_results_rf = []\n",
    "for max_depth in max_depths:\n",
    "   rf = RandomForestClassifier(max_depth=max_depth)\n",
    "   rf.fit(X_train, y_train)\n",
    "   train_pred = rf.predict(X_train)\n",
    "   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)\n",
    "   roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "   train_results_rf.append(roc_auc)\n",
    "   y_pred = rf.predict(X_test)\n",
    "   false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred)\n",
    "   roc_auc = auc(false_positive_rate, true_positive_rate)\n",
    "   test_results_rf.append(roc_auc)\n",
    "\n",
    "#plotting the AUC curves\n",
    "from matplotlib.legend_handler import HandlerLine2D\n",
    "line1, = plt.plot(max_depths, train_results_rf, 'b', label=\"Train AUC\")\n",
    "line2, = plt.plot(max_depths, test_results_rf, 'r', label=\"Test AUC\")\n",
    "plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})\n",
    "plt.ylabel('AUC score')\n",
    "plt.xlabel('Tree depth')\n",
    "plt.show()\n",
    "\n",
    "#Displaying the optimumm max_depth value for the classifier\n",
    "max_y2=max(test_results_rf)\n",
    "max_x2=max_depths[test_results_rf.index(max_y2)]\n",
    "print(f'The optimum maximum depth of the tree is {max_x2}.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/tom/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuracy score of the RandomForest model on the testing data with a maximum depth of 11.0 is 0.7623333333333333.\n",
      "The accuracy score of the RandomForest model on the training data with a maximum depth of 11.0 is 0.8125.\n"
     ]
    }
   ],
   "source": [
    "## RANDOM FOREST CLASSIFIER ##\n",
    "#Random Forest with both optimum max_depth & important features \n",
    "model_RF_final = RandomForestClassifier(random_state=RSEED, max_depth=max_x2)\n",
    "\n",
    "#fitting the final classifier\n",
    "model_RF_final.fit(X_important_train, y_train)\n",
    "y_final_pred1 = model_RF_final.predict(X_important_test)\n",
    "y_final_pred2 = model_RF_final.predict(X_important_train)\n",
    "\n",
    "#accuracy scores on the training & testing subsets\n",
    "a3=accuracy_score(y_test, y_final_pred1)\n",
    "a4=accuracy_score(y_train, y_final_pred2)\n",
    "\n",
    "print(f'The accuracy score of the RandomForest model on the testing data with a maximum depth of {model_RF_final.max_depth} is {a3}.')\n",
    "print(f'The accuracy score of the RandomForest model on the training data with a maximum depth of {model_RF_final.max_depth} is {a4}.')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
